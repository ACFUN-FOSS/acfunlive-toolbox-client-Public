{"version":3,"sources":["webpack:///./node_modules/lodash/_baseValues.js","webpack:///./node_modules/lodash/values.js","webpack:///./node_modules/lodash/sampleSize.js","webpack:///./node_modules/lodash/toInteger.js","webpack:///./src/electron_browser/views/danmakuSetting/mock/index.ts","webpack:///./node_modules/lodash/_arraySample.js","webpack:///./node_modules/lodash/_baseSampleSize.js","webpack:///./node_modules/lodash/toFinite.js","webpack:///./node_modules/lodash/sample.js","webpack:///./node_modules/lodash/_baseClamp.js","webpack:///./node_modules/lodash/_baseRandom.js","webpack:///./node_modules/lodash/_arraySampleSize.js","webpack:///./node_modules/lodash/_shuffleSelf.js","webpack:///./node_modules/lodash/_baseSample.js"],"names":["arrayMap","baseValues","object","props","key","module","exports","keys","values","arraySampleSize","baseSampleSize","isArray","isIterateeCall","toInteger","sampleSize","collection","n","guard","undefined","func","toFinite","value","result","remainder","timestamp","Date","getTime","initMock","getMock","mockNum","forEach","mock","unshift","Object","freeze","getMockByType","type","testers","filter","i","pass","String","length","tester","getPaidGift","baseRandom","arraySample","array","baseClamp","shuffleSelf","toNumber","INFINITY","MAX_INTEGER","sign","baseSample","sample","number","lower","upper","nativeFloor","Math","floor","nativeRandom","random","copyArray","size","index","lastIndex","rand"],"mappings":"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","file":"js/chunk-5c608760.846cbb55.js","sourcesContent":["var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n","var arraySampleSize = require('./_arraySampleSize'),\n    baseSampleSize = require('./_baseSampleSize'),\n    isArray = require('./isArray'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toInteger = require('./toInteger');\n\n/**\n * Gets `n` random elements at unique keys from `collection` up to the\n * size of `collection`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to sample.\n * @param {number} [n=1] The number of elements to sample.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the random elements.\n * @example\n *\n * _.sampleSize([1, 2, 3], 2);\n * // => [3, 1]\n *\n * _.sampleSize([1, 2, 3], 4);\n * // => [2, 3, 1]\n */\nfunction sampleSize(collection, n, guard) {\n  if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n    n = 1;\n  } else {\n    n = toInteger(n);\n  }\n  var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n  return func(collection, n);\n}\n\nmodule.exports = sampleSize;\n","var toFinite = require('./toFinite');\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n","import mockData from \"./danmaku.json\";\r\nimport cloneDeep from \"lodash/cloneDeep\";\r\nimport sampleSize from \"lodash/sampleSize\";\r\nimport sample from \"lodash/sample\";\r\nimport { basicComponentTester } from \"@front/components/danmakuFlow/utils/tester\";\r\nimport {\r\n\tsetTime,\r\n\tgetGiftValue\r\n} from \"@front/components/danmakuFlow/utils/getter\";\r\nlet timestamp = new Date().getTime();\r\nexport const initMock = (): Array<any> => {\r\n\treturn getMock(10);\r\n};\r\n\r\nexport const getMock = (mockNum = 1): Array<any> => {\r\n\tconst result: any = [];\r\n\tsampleSize(mockData, mockNum).forEach((mock: any) => {\r\n\t\tresult.unshift(Object.freeze(setTime(cloneDeep(mock), timestamp)));\r\n\t\ttimestamp += 1000;\r\n\t});\r\n\treturn result;\r\n};\r\n\r\nexport const getMockByType = (type: number | string): any => {\r\n\tif (!type) {\r\n\t\treturn mockData[0];\r\n\t}\r\n\r\n\t// @ts-ignore\r\n\tconst testers = basicComponentTester[type];\r\n\treturn sample(\r\n\t\tmockData.filter((i: any) => {\r\n\t\t\tlet pass = String(i.type) === String(type);\r\n\t\t\tif (pass && testers && testers.length) {\r\n\t\t\t\ttesters.forEach((tester: any) => {\r\n\t\t\t\t\tif (!tester(i)) pass = false;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn pass;\r\n\t\t})\r\n\t);\r\n};\r\n\r\nexport const getPaidGift = (): any => {\r\n\treturn sample(\r\n\t\tmockData.filter((i: any) => {\r\n\t\t\treturn i.type === 1005 && getGiftValue(i) > 0;\r\n\t\t})\r\n\t);\r\n};\r\n","var baseRandom = require('./_baseRandom');\n\n/**\n * A specialized version of `_.sample` for arrays.\n *\n * @private\n * @param {Array} array The array to sample.\n * @returns {*} Returns the random element.\n */\nfunction arraySample(array) {\n  var length = array.length;\n  return length ? array[baseRandom(0, length - 1)] : undefined;\n}\n\nmodule.exports = arraySample;\n","var baseClamp = require('./_baseClamp'),\n    shuffleSelf = require('./_shuffleSelf'),\n    values = require('./values');\n\n/**\n * The base implementation of `_.sampleSize` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to sample.\n * @param {number} n The number of elements to sample.\n * @returns {Array} Returns the random elements.\n */\nfunction baseSampleSize(collection, n) {\n  var array = values(collection);\n  return shuffleSelf(array, baseClamp(n, 0, array.length));\n}\n\nmodule.exports = baseSampleSize;\n","var toNumber = require('./toNumber');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nmodule.exports = toFinite;\n","var arraySample = require('./_arraySample'),\n    baseSample = require('./_baseSample'),\n    isArray = require('./isArray');\n\n/**\n * Gets a random element from `collection`.\n *\n * @static\n * @memberOf _\n * @since 2.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to sample.\n * @returns {*} Returns the random element.\n * @example\n *\n * _.sample([1, 2, 3, 4]);\n * // => 2\n */\nfunction sample(collection) {\n  var func = isArray(collection) ? arraySample : baseSample;\n  return func(collection);\n}\n\nmodule.exports = sample;\n","/**\n * The base implementation of `_.clamp` which doesn't coerce arguments.\n *\n * @private\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n */\nfunction baseClamp(number, lower, upper) {\n  if (number === number) {\n    if (upper !== undefined) {\n      number = number <= upper ? number : upper;\n    }\n    if (lower !== undefined) {\n      number = number >= lower ? number : lower;\n    }\n  }\n  return number;\n}\n\nmodule.exports = baseClamp;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n","var baseClamp = require('./_baseClamp'),\n    copyArray = require('./_copyArray'),\n    shuffleSelf = require('./_shuffleSelf');\n\n/**\n * A specialized version of `_.sampleSize` for arrays.\n *\n * @private\n * @param {Array} array The array to sample.\n * @param {number} n The number of elements to sample.\n * @returns {Array} Returns the random elements.\n */\nfunction arraySampleSize(array, n) {\n  return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n}\n\nmodule.exports = arraySampleSize;\n","var baseRandom = require('./_baseRandom');\n\n/**\n * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @param {number} [size=array.length] The size of `array`.\n * @returns {Array} Returns `array`.\n */\nfunction shuffleSelf(array, size) {\n  var index = -1,\n      length = array.length,\n      lastIndex = length - 1;\n\n  size = size === undefined ? length : size;\n  while (++index < size) {\n    var rand = baseRandom(index, lastIndex),\n        value = array[rand];\n\n    array[rand] = array[index];\n    array[index] = value;\n  }\n  array.length = size;\n  return array;\n}\n\nmodule.exports = shuffleSelf;\n","var arraySample = require('./_arraySample'),\n    values = require('./values');\n\n/**\n * The base implementation of `_.sample`.\n *\n * @private\n * @param {Array|Object} collection The collection to sample.\n * @returns {*} Returns the random element.\n */\nfunction baseSample(collection) {\n  return arraySample(values(collection));\n}\n\nmodule.exports = baseSample;\n"],"sourceRoot":""}